[
{
	"uri": "//localhost:1313/1-introduce_ingress/1.1-ingress_component/",
	"title": "Ingress Components",
	"tags": [],
	"description": "",
	"content": "\n1. Structure of Ingress Resource 1.1 Ingress Rule An Ingress Rule is a resource in Kubernetes that defines how to route traffic from outside into services inside the cluster.\nEach HTTP rule contains the following information:\nHost information (optional). If a specific host is declared, the rule will only apply to that host. If no host is declared, the rule applies to all incoming HTTP traffic.\nA list of paths (e.g., /testpath as shown above), where each path contains a pathType and a corresponding backend (service) with its port.\nA backend consists of a service and a port. HTTP (HTTPS) requests that satisfy the conditions for the host and path will be routed to the declared backend.\n1.2 Path Types There are 2 types of paths:\nPrefix: If pathType is Prefix, Ingress will route traffic to the service if the request path starts with the rule\u0026rsquo;s path. For example: /service1 and /service1/api will both route to service1.\nExact: If pathType is Exact, Ingress will route traffic to the service only if the request path exactly matches the rule\u0026rsquo;s path. For example: /service1 will route to service1 but /service1/api will not.\nImplementationSpecific: If pathType is ImplementationSpecific, the Ingress Controller will decide how to route the traffic to the service.\n2. Ingress Controller An Ingress Controller is a daemon that makes routing decisions based on the information in Ingress Rules.\nIn simpler terms, the Ingress Controller acts like a traffic director, and the Ingress Rule is a guide for the director to route traffic into services in the cluster.\nPopular Ingress Controllers include: Nginx Ingress Controller, Traefik, HAProxy, etc.\nIn this article, we will use the Nginx Ingress Controller.\n3. Example of an Ingress: apiVersion: networking.k8s.io/v1\rkind: Ingress\rmetadata:\rname: example-ingress\rnamespace: default\rannotations:\rnginx.ingress.kubernetes.io/rewrite-target: /\rspec:\rrules:\r- host: example.com\rhttp:\rpaths:\r- path: /service1\rpathType: Prefix\rbackend:\rservice:\rname: service1\rport:\rnumber: 80\r- path: /service2\rpathType: Prefix\rbackend:\rservice:\rname: service2\rport:\rnumber: 80\rapiVersion: apps/v1: Declares the Kubernetes API version being used for Ingress. kind: Ingress: The resource type being declared, in this case, Ingress. metadata: Information about the Ingress. name: The name of the Ingress. namespace: The namespace to which the Ingress belongs. annotations: Additional information for the Ingress. nginx.ingress.kubernetes.io/rewrite-target: Extra information for the Ingress Controller. spec: Configuration details for the Ingress. rules: The rules of the Ingress. host: The domain name that the Ingress will route traffic to. http: Configuration for the HTTP protocol. paths: The paths that the Ingress will route traffic to. path: The path that the Ingress will route traffic to. pathType: The type of the path. backend: The backend configuration for the path. service: The name of the service that the Ingress will route traffic to. port: The port of the service that the Ingress will route traffic to. number: The port of the service that the Ingress will route traffic to. 3. Example of an Ingress: apiVersion: networking.k8s.io/v1\rkind: Ingress\rmetadata:\rname: example-ingress\rnamespace: default\rannotations:\rnginx.ingress.kubernetes.io/rewrite-target: /\rspec:\rrules:\r- host: example.com\rhttp:\rpaths:\r- path: /service1\rpathType: Prefix\rbackend:\rservice:\rname: service1\rport:\rnumber: 80\r- path: /service2\rpathType: Prefix\rbackend:\rservice:\rname: service2\rport:\rnumber: 80\rWith the above configuration file, the Ingress will route traffic from the domain example.com to two services service1 and service2 via the paths /service1 and /service2.\n"
},
{
	"uri": "//localhost:1313/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Public a Service and Route Traffic by Subdomain and Path 1. Overview Hello everyone! In this workshop, I will accompany you to explore an important concept in Kubernetes, which is ingress, and proceed to public a service and route traffic using subdomains and paths.\nIn Kubernetes, there are many types and versions available, but in a learning or lab environment, we can use more compact and lightweight versions of Kubernetes like Minikube, K3s, MicroK8s, etc. In this series, I will be using MicroK8s.\n2. Objectives The objective of this workshop series is to provide you with the fundamental concepts of Kubernetes.\nThis will also serve as a foundation for many future workshop series on Kubernetes.\n3. Content Introduction to Ingress. Installing MicroK8s. Installing Ingress Controller. Public a service and route traffic using subdomains. Public a service and route traffic using paths. "
},
{
	"uri": "//localhost:1313/1-introduce_ingress/",
	"title": "Introduction to Ingress",
	"tags": [],
	"description": "",
	"content": "\n1. Why do we need Ingress? In the previous workshop, I introduced you to concepts like Service, Deployment, Pod, Namespace, etc., and in this article, I will introduce you to Ingress.\nIn the last workshop, we were able to expose services outside the cluster using NodePort. This method works fine but isn\u0026rsquo;t always the best fit. The total number of ports on a node is limited and cannot scale. If many services need to be exposed, managing these ports becomes challenging.\nMoreover, NodePort only allows us to expose services outside the cluster through ports and does not support exposing services via domain names.\nIngress was created to solve this issue. Ingress is a resource in Kubernetes that allows traffic routing from outside the cluster to services inside the cluster.\n2. The concept of Ingress in Kubernetes Ingress is a resource in Kubernetes that allows traffic routing from outside the cluster to services inside the cluster.\nAs illustrated in the image above, when we use ingress, there is only one entry point into the cluster, from which traffic can be routed to various services inside the cluster.\nTo make it clearer, imagine you have multiple services running inside your k8s cluster, each service like a store in a shopping mall. Ingress acts like a receptionist at the entrance of the mall, guiding customers (external requests) to the correct store (service) they need.\n3. Components of Ingress Ingress consists of two main components:\nIngress Rule: A resource in Kubernetes that defines how to route traffic from outside to services inside the cluster.\nIngress Controller: A daemon that makes routing decisions based on information from the Ingress Resource.\nWe will dive deeper into Ingress Rule and Ingress Controller in the following sections.\n"
},
{
	"uri": "//localhost:1313/2-install_microk8s/2.1-ubuntu/",
	"title": "Ubuntu",
	"tags": [],
	"description": "",
	"content": "1. Install MicroK8s on Linux sudo snap install microk8s --classic\rsudo snap alias microk8s.kubectl kubectl\r2. Check the status while Kubernetes starts microk8s status --wait-ready\r3. Turn on the services you want microk8s enable dashboard\rmicrok8s enable dns\rmicrok8s enable registry\r4. Start using Kubernetes microk8s kubectl get all --all-namespaces\r"
},
{
	"uri": "//localhost:1313/2-install_microk8s/",
	"title": "Install microk8s",
	"tags": [],
	"description": "",
	"content": "\n1. Reference information for the installation process of MicroK8s 2. Reference information for the installation process of MiniKube "
},
{
	"uri": "//localhost:1313/2-install_microk8s/2.2-windows/",
	"title": "Windows",
	"tags": [],
	"description": "",
	"content": "1. Download the installer for Windows 2. Run the Installer 3. Open a command line 4. Check the status while Kubernetes starts microk8s status --wait-ready\r5. Turn on the services you want microk8s enable dashboard\rmicrok8s enable dns\rmicrok8s enable registry\r6. Start using Kubernetes microk8s kubectl get all --all-namespaces\r"
},
{
	"uri": "//localhost:1313/3-install_ingress_controller/",
	"title": "Installing Ingress Controller",
	"tags": [],
	"description": "",
	"content": "In this article, I will use MicroK8s to install the Ingress Controller and use Nginx Ingress Controller as an example.\n1. Installing Ingress Controller using the Add-on The ingress feature is available as an Add-on in MicroK8s, making the installation quite simple.\nmicrok8s enable ingress\rAfter installation, we will see a new Pod created:\nHowever, I will now guide you through installing the Ingress Controller using Helm, in case you are not using MicroK8s or want more customization.\n2. Installing Ingress Controller using Helm First, I will disable the Ingress Add-on:\nmicrok8s disable ingress\rNext, we will install Helm:\nsudo snap install helm --classic\rAfter installing Helm, we will add the Nginx Ingress Controller Helm repository:\nhelm repo add nginx-stable https://helm.nginx.com/stable\rhelm repo update\rNext, we will install the Nginx Ingress Controller:\nhelm install nginx-ingress ingress-nginx/ingress-nginx\r"
},
{
	"uri": "//localhost:1313/2-install_microk8s/2.3-macos/",
	"title": "macOS",
	"tags": [],
	"description": "",
	"content": "1. Install MicroK8s on macOS brew install ubuntu/microk8s/microk8s\rmicrok8s install\r2. Check the status while Kubernetes starts microk8s status --wait-ready\r3. Turn on the services you want microk8s enable dashboard\rmicrok8s enable dns\rmicrok8s enable registry\r4. Start using Kubernetes microk8s kubectl get all --all-namespaces\r"
},
{
	"uri": "//localhost:1313/4-public_service_with_ingress-1/",
	"title": "Using Ingress to Route Traffic by Subdomain",
	"tags": [],
	"description": "",
	"content": "In this article, I will guide you on how to use Ingress to route traffic by subdomain.\n1. Introduction We will create two services, each of which will route traffic through a different subdomain.\nservice1.example.com -\u0026gt; service1\nservice2.example.com -\u0026gt; service2\n2. Create two deployments and services Here, I create two simple deployments and services using the nginx image:\nDeploy these two files:\nkubectl apply -f service1.yaml\rkubectl apply -f service2.yaml\rCheck to make sure everything is fine:\nkubectl get pods\r3. Configure Ingress to route traffic apiVersion: networking.k9s.io/v1: Declares the API version of Kubernetes that we use for Ingress. kind: Ingress: The type of resource we are declaring, here it\u0026rsquo;s Ingress. metadata: Information about the Ingress name: The name of the Ingress annotations: Additional information for the Ingress nginx.ingress.kubernetes.io/rewrite-target: Additional information for NGINX Ingress Controller, used to rewrite the request path to / before sending it to the backend. spec: Configuration information for the Ingress rules: The rules that Ingress will use to route traffic to the backend services host: The subdomain we want to route traffic through. Here, there are two domains: service1.example.com and service2.example.com. http: Configuration for HTTP paths: The paths we want to route traffic through path: The path that Ingress will route traffic to. In this example, the path is / on both domains. pathType: The type of path, here it is Prefix. Prefix means that any request starting with this path will be routed to the backend. backend: Backend configuration for the path. service: The name of the service that Ingress will route traffic to. port: The port of the service that Ingress will route traffic to. number: The port number of the service that Ingress will route traffic to. Here, both services are listening on port 80. Deploy the Ingress configuration file:\nkubectl apply -f ingress.yaml\rCheck if the Ingress has been created:\nkubectl get ingress\rWe have now created an Ingress to route traffic by subdomain.\n4. Check the result First, find the host machine\u0026rsquo;s IP information:\nifconfig\rHere, the host\u0026rsquo;s IP is: 192.168.1.4\nTo check the result, we need to add two lines to the hosts file. Currently, I\u0026rsquo;m using Ubuntu, so the hosts file is located at /etc/hosts:\nsudo nano /etc/hosts\rAdd the following two lines to the hosts file:\n192.168.1.4 service1.example.com\r192.168.1.4 service2.example.com\rNext, open a browser and access the two domains service1.example.com and service2.example.com:\nWe have now successfully used Ingress to route traffic by subdomain.\n"
},
{
	"uri": "//localhost:1313/5-public_service_with_ingress-2/",
	"title": "Using Ingress to Route Traffic by Path",
	"tags": [],
	"description": "",
	"content": "As mentioned in the previous section, I guided you on how to public a service and route its traffic by subdomain. In this section, I will show you how to use Ingress to route traffic by path.\n1. Introduction In simple terms, we will route traffic to a service based on the request\u0026rsquo;s path.\nexample.com/service1 -\u0026gt; service1\nexample.com/service2 -\u0026gt; service2\n2. Create two deployments and services Here, I create two simple deployments and services using the nginx image, using the same two services from the previous section:\nDeploy these two files:\nkubectl apply -f service1.yaml\rkubectl apply -f service2.yaml\rCheck to make sure everything is fine:\nkubectl get pods\r3. Configure Ingress to route traffic apiVersion: networking.k9s.io/v1: Declares the API version of Kubernetes that we use for Ingress. kind: Ingress: The type of resource we are declaring, here it\u0026rsquo;s Ingress. metadata: Information about the Ingress name: The name of the Ingress annotations: Additional information for the Ingress nginx.ingress.kubernetes.io/rewrite-target: Additional information for NGINX Ingress Controller, used to rewrite the request path to / before sending it to the backend. spec: Configuration information for the Ingress rules: The rules that Ingress will use to route traffic to the backend services host: The domain name that Ingress will route traffic to. Here, there are two domains: service1.example.com and service2.example.com. http: Configuration for HTTP paths: The paths we want to route traffic through path: The path that Ingress will route traffic to. In this example, the path is /service1 routing traffic to service1 and /service2 routing traffic to service2. pathType: The type of path, here it is Prefix. Prefix means that any request starting with this path will be routed to the backend. backend: Backend configuration for the path. service: The name of the service that Ingress will route traffic to. port: The port of the service that Ingress will route traffic to. number: The port number of the service that Ingress will route traffic to. Here, both services are listening on port 80. Deploy the Ingress configuration file:\nkubectl apply -f ingress.yaml\rCheck if the Ingress has been created:\nkubectl get ingress\rWe have now created an Ingress to route traffic by path.\n4. Check the result First, find the host machine\u0026rsquo;s IP information:\nifconfig\rHere, the host\u0026rsquo;s IP is: 192.168.1.4\nTo check the result, we need to add a line to the hosts file. Currently, I\u0026rsquo;m using Ubuntu, so the hosts file is located at /etc/hosts:\nsudo nano /etc/hosts\rAdd the following line to the hosts file:\n192.168.1.4 example.com\rNext, open a browser and access the two URLs example.com/service1 and example.com/service2:\nWe have now successfully used Ingress to route traffic by path.\n"
},
{
	"uri": "//localhost:1313/6-canary_deployments/",
	"title": "Configuring Canary Deployments",
	"tags": [],
	"description": "",
	"content": "In this article, I will guide you on how to implement Canary Deployments with Ingress.\n1. What are Canary Deployments? Canary Deployments are a method of safely and controllably rolling out new software versions. This approach allows you to deploy a new version of the application and direct only a small portion of the traffic to the new version. This helps you test the new version before rolling it out to all users.\n2. Configuring Canary Deployments for Ingress We will reuse the two services from the previous section.\nI will take service 1 as the old version and service 2 as the new version.\nWe have the following Ingress configuration file:\nHere, I will route 80% of the traffic to service 1 and 20% to service 2.\nDeploy the Ingress configuration file:\nkubectl apply -f ingress.yaml\r3. Check the Result First, find the host machine\u0026rsquo;s IP information:\nifconfig\rHere, the host\u0026rsquo;s IP is: 192.168.1.4\nTo check the result, we need to add a line to the hosts file. Currently, I\u0026rsquo;m using Ubuntu, so the hosts file is located at /etc/hosts:\nsudo nano /etc/hosts\rAdd the following line to the hosts file:\n192.168.1.4 canary.example.com\rNext, open a browser and access the domain canary.example.com.\nWe have successfully configured Canary Deployments with Ingress, directing 80% of traffic to service 1 and 20% to service 2.\n"
},
{
	"uri": "//localhost:1313/7-whitelist_deployments/",
	"title": "Configuring Ingress with IP Whitelist",
	"tags": [],
	"description": "",
	"content": "In this article, I will guide you on how to configure Ingress with an IP Whitelist.\n1. What is an IP Whitelist? An IP Whitelist is a list of IP addresses that are allowed to access a service or application. IPs not on this list will not be able to access that service or application.\nThe purpose of this feature is to protect the service or application from attacks from unwanted IPs or to restrict access to specific IPs, such as internal company IPs.\n2. Configuring Ingress with IP Whitelist We will reuse the two services from the previous section.\nI will take service 1 as the old version and service 2 as the new version.\nWe will configure access to service 2 so that only the IP 192.168.1.10 is allowed.\nIn the configuration file above, we route \u0026ldquo;service2.example.com\u0026rdquo; to service 2, but only the IP 192.168.1.10 is allowed to access service 2.\nDeploy the Ingress configuration file:\nkubectl apply -f ingress.yaml\r3. Check the Result First, find the host machine\u0026rsquo;s IP information:\nifconfig\rHere, the host\u0026rsquo;s IP is: 192.168.1.4\nTo check the result, we need to add a line to the hosts file. Currently, I\u0026rsquo;m using Ubuntu, so the hosts file is located at /etc/hosts:\nsudo nano /etc/hosts\rAdd the following lines to the hosts file:\n192.168.1.4 service2.example.com\rNext, open a browser and access the domain service2.example.com from the host machine. You will encounter a 403 Forbidden error:\nNext, we will try to access the domain service2.example.com from a machine with the IP 192.168.1.10:\nCurrently, this is the machine with the correct whitelisted IP:\nHere, I also need to configure the /etc/hosts file as on the machine with the IP 192.168.1.10:\nAfter that, we will proceed to curl the domain service2.example.com:\ncurl service2.example.com\rThe response will be:\nThus, we have successfully configured Ingress with an IP Whitelist, allowing only the IP 192.168.1.10 to access service 2.\n"
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]