[
{
	"uri": "//localhost:1313/vi/1-introduce_ingress/1.1-ingress_component/",
	"title": "Các thành phần của Ingress",
	"tags": [],
	"description": "",
	"content": "\n1. Cấu trúc của Ingress Resource 1.1 Ingress Rule Ingress Rule là một resource trong Kubernetes, nó định nghĩa cách route traffic từ bên ngoài vào các service trong cluster.\nMỗi HTTP rule sẽ bao gồm các thông tin sau:\nThông tin host (không bắt buộc). Nếu có khai báo host cụ thể, rule sẽ chỉ apply cho host đó. Nếu host không được khai báo, thì rule được áp dụng cho mọi http đến.\nDanh sách paths (ví dụ /testpath như bên trên), mỗi path sẽ có thông tin pathType và một backend (service) tương ứng với port của nó.\nMột backend là một bộ gồm service và port. HTTP (HTTPS) request mà thỏa mãn điều kiện về host và path sẽ được chuyển tới backend đã khai báo\n1.2 Path types Có 2 loại path:\nPrefix: Nếu pathType là Prefix, Ingress sẽ route traffic vào service nếu path của request bắt đầu bằng path của rule. Ví dụ: /service1 và /service1/api sẽ được route vào service1.\nExact: Nếu pathType là Exact, Ingress sẽ route traffic vào service nếu path của request bằng path của rule. Ví dụ: /service1 sẽ được route vào service1 nhưng /service1/api sẽ không được route vào service1.\nImplementationSpecific: Nếu pathType là ImplementationSpecific, Ingress Controller sẽ xác định cách route traffic vào service.\n2. Ingress Controller Ingress Controller là một daemon, nó sẽ thực hiện các quyết định định tuyến dựa trên thông tin trong Ingress Rule.\nNói một cách dễ hiểu, Ingress Controller giống như một người điều phối và Ingress Rule là một bản hướng dẫn cho người điều phối đó để hướng dẫn traffic vào các service trong cluster.\nCác loại Ingress Controller phổ biến: Nginx Ingress Controller, Traefik, HAProxy, \u0026hellip;\nTrong bài viết này, chúng ta sẽ sử dụng Nginx Ingress Controller.\n3. Ví dụ về Ingress: apiVersion: networking.k8s.io/v1\rkind: Ingress\rmetadata:\rname: example-ingress\rnamespace: default\rannotations:\rnginx.ingress.kubernetes.io/rewrite-target: /\rspec:\rrules:\r- host: example.com\rhttp:\rpaths:\r- path: /service1\rpathType: Prefix\rbackend:\rservice:\rname: service1\rport:\rnumber: 80\r- path: /service2\rpathType: Prefix\rbackend:\rservice:\rname: service2\rport:\rnumber: 80\rapiVersion: apps/v1: Khai báo phiên bản API của Kubernetes mà chúng ta sử dụng cho Ingress. kind: Ingress: Loại resource mà chúng ta đang khai báo, ở đây là Ingress. metadata: Thông tin về Ingress. name: Tên của Ingress. namespace: Namespace mà Ingress thuộc về. annotations: Các thông tin bổ sung cho Ingress. nginx.ingress.kubernetes.io/rewrite-target: Thông tin bổ sung cho Ingress Controller. spec: Thông tin cấu hình cho Ingress. rules: Các rule của Ingress. host: Domain name mà Ingress sẽ route traffic vào. http: Cấu hình cho giao thức HTTP. paths: Các đường dẫn mà Ingress sẽ route traffic vào. path: Đường dẫn mà Ingress sẽ route traffic vào. pathType: Loại đường dẫn. backend: Cấu hình backend cho đường dẫn. service: Tên service mà Ingress sẽ route traffic vào. port: Port của service mà Ingress sẽ route traffic vào. number: Port của service mà Ingress sẽ route traffic vào. Với file cấu hình trên, Ingress sẽ route traffic từ domain example.com vào 2 service service1 và service2 thông qua đường dẫn /service1 và /service2.\n"
},
{
	"uri": "//localhost:1313/vi/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Cài đặt và triển khai service đầu tiên với Kubernetes (Microk8s) 1. Overview Xin chào các bạn trong bài workshop này mình sẽ cùng đồng hành cùng các bạn tìm hiểu từ các khái niệm cơ bản nhất của Kubernetes và tiến hành triển khai service đầu tiên lên K8s.\nĐối với K8s thì sẽ có nhiều loại, phiên bản khác nhau, nhưng trong môi trường học tập, làm lab chúng ta có thể dùng các phiên bản nhỏ gọn và nhẹ hơn cả K8s như Minikube, K3s, MicoK8s, \u0026hellip; trong chuỗi series này mình sẽ sử dụng MicroK8s.\n2. Objectives Mục tiêu của workshop này sẽ giúp các bạn có những khái niệm cơ bản nhất về các khái niệm trong K8s và cách triển khai service đầu tiên.\nĐây cũng sẽ là tiền đề cho nhiều chuỗi workshop sau này về K8s.\n3. Content Giới thiệu về Kubernetes và MicroK8s. Cài đặt MicroK8s. Tạo và triển khai dịch vụ đầu tiên của bạn trên Kubernetes. Kiểm tra và quản lý dịch vụ đã triển khai. "
},
{
	"uri": "//localhost:1313/vi/1-introduce_ingress/",
	"title": "Giới thiệu về Ingress",
	"tags": [],
	"description": "",
	"content": "\n1. Vì sao cần Ingress? Trước đó trong workshop mình đã giới thiệu về Service, Deployment, Pod, Namespace, \u0026hellip; và trong bài này mình sẽ giới thiệu cho các bạn về Ingress.\nTrong ws trước chúng ta đã có thể expose service ra bên ngoài cluster thông qua NodePort cách này vẫn hoạt động tốt nhưng không phải lúc nào cũng phù hợp, tổng số port trên một node là có hạn và không thể mở rộng, nếu có nhiều service cần expose ra bên ngoài thì việc quản lý port sẽ trở nên khó khăn.\nHơn nữa NodePort chỉ cho phép expose service ra bên ngoài cluster thông qua port, không thể expose service ra bên ngoài cluster thông qua domain name.\nVì vậy Ingress ra đời để giải quyết vấn đề trên, Ingress là một resource trong Kubernetes cho phép route traffic từ bên ngoài vào các service trong cluster.\n2. Khái niệm về Ingress trong Kubernetes. Ingress là một resource trong Kubernetes cho phép route traffic từ bên ngoài vào các service trong cluster.\nNhư hình minh họa ở trên khi chúng ta dùng ingress thì chỉ có 1 cổng đi vào cluster, từ đó có thể route traffic vào các service trong cluster.\nĐể dễ hiểu hơn, hãy tưởng tượng bạn có nhiều dịch vụ chạy bên trong cụm k8s của mình, mỗi dịch vụ giống như một cửa hàng trong một trung tâm thương mại. Ingress giống như một quầy lễ tân ở lối vào trung tâm thương mại, nơi sẽ hướng dẫn khách hàng (yêu cầu từ bên ngoài) đến đúng cửa hàng (dịch vụ) mà họ cần.\n3. Các thành phần của Ingress Ingress bao gồm 2 thành phần chính:\nIngress Rule: Là một resource trong Kubernetes, nó định nghĩa cách route traffic từ bên ngoài vào các service trong cluster.\nIngress Controller: Là một daemon, nó sẽ thực hiện các quyết định định tuyến dựa trên thông tin trong Ingress Resource.\nChúng ta sẽ tìm hiểu chi tiết hơn về Ingress Rule và Ingress Controller trong các phần tiếp theo.\n"
},
{
	"uri": "//localhost:1313/vi/2-install_microk8s/2.1-ubuntu/",
	"title": "Ubuntu",
	"tags": [],
	"description": "",
	"content": "1. Install MicroK8s on Linux sudo snap install microk8s --classic\rsudo snap alias microk8s.kubectl kubectl\r2. Check the status while Kubernetes starts microk8s status --wait-ready\r3. Turn on the services you want microk8s enable dashboard\rmicrok8s enable dns\rmicrok8s enable registry\r4. Start using Kubernetes microk8s kubectl get all --all-namespaces\r"
},
{
	"uri": "//localhost:1313/vi/2-install_microk8s/",
	"title": "Install microk8s",
	"tags": [],
	"description": "",
	"content": "\n1. Thông tin tham khảo về quá trình cài đặt MicroK8s 2. Thông tin tham khảo về quá trình cài đặt MiniKube "
},
{
	"uri": "//localhost:1313/vi/2-install_microk8s/2.2-windows/",
	"title": "Windows",
	"tags": [],
	"description": "",
	"content": "1. Download the installer for Windows 2. Run the Installer 3. Open a command line 4. Check the status while Kubernetes starts microk8s status --wait-ready\r5. Turn on the services you want microk8s enable dashboard\rmicrok8s enable dns\rmicrok8s enable registry\r6. Start using Kubernetes microk8s kubectl get all --all-namespaces\r"
},
{
	"uri": "//localhost:1313/vi/2-install_microk8s/2.3-macos/",
	"title": "macOS",
	"tags": [],
	"description": "",
	"content": "1. Install MicroK8s on macOS brew install ubuntu/microk8s/microk8s\rmicrok8s install\r2. Check the status while Kubernetes starts microk8s status --wait-ready\r3. Turn on the services you want microk8s enable dashboard\rmicrok8s enable dns\rmicrok8s enable registry\r4. Start using Kubernetes microk8s kubectl get all --all-namespaces\r"
},
{
	"uri": "//localhost:1313/vi/3-install_ingress_controller/",
	"title": "Tiến hành cài đặt Ingress Controller",
	"tags": [],
	"description": "",
	"content": "Trong bài viết này, tôi sử dụng MicroK8s để cài đặt Ingress Controller, và sử dụng Nginx Ingress Controller làm ví dụ.\n1. Cài đặt Ingress Controller bằng Add-on Phần ingress này nằm trong phần Add-on của MicroK8s, nên việc cài đặt khá đơn giản.\nmicrok8s enable ingress\rSau khi cài đặt xong, chúng ta sẽ thấy một Pod mới được tạo ra:\nTuy nhiên sau đây tôi sẽ hướng dẫn các bạn cách cài đặt Ingress Controller bằng cách sử dụng Helm. Phòng trường hợp bạn không sử dụng MicroK8s hoặc muốn tùy chỉnh nhiều hơn.\n2. Cài đặt Ingress Controller bằng Helm Đầu tiên tôi sẽ disable Add-on Ingress trước:\nmicrok8s disable ingress\rTiếp theo, chúng ta sẽ cài đặt Helm:\nsudo snap install helm --classic\rSau khi cài đặt xong, chúng ta sẽ add Helm repository của Nginx Ingress Controller:\nhelm repo add nginx-stable https://helm.nginx.com/stable\rhelm repo update\rTiếp theo, chúng ta sẽ cài đặt Nginx Ingress Controller:\nhelm install nginx-ingress ingress-nginx/ingress-nginx "
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]