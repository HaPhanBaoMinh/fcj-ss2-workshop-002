[
{
	"uri": "//localhost:1313/vi/1-introduce_ingress/1.1-ingress_component/",
	"title": "Các thành phần của Ingress",
	"tags": [],
	"description": "",
	"content": "\n1. Cấu trúc của Ingress Resource 1.1 Ingress Rule Ingress Rule là một resource trong Kubernetes, nó định nghĩa cách route traffic từ bên ngoài vào các service trong cluster.\nMỗi HTTP rule sẽ bao gồm các thông tin sau:\nThông tin host (không bắt buộc). Nếu có khai báo host cụ thể, rule sẽ chỉ apply cho host đó. Nếu host không được khai báo, thì rule được áp dụng cho mọi http đến.\nDanh sách paths (ví dụ /testpath như bên trên), mỗi path sẽ có thông tin pathType và một backend (service) tương ứng với port của nó.\nMột backend là một bộ gồm service và port. HTTP (HTTPS) request mà thỏa mãn điều kiện về host và path sẽ được chuyển tới backend đã khai báo\n1.2 Path types Có 2 loại path:\nPrefix: Nếu pathType là Prefix, Ingress sẽ route traffic vào service nếu path của request bắt đầu bằng path của rule. Ví dụ: /service1 và /service1/api sẽ được route vào service1.\nExact: Nếu pathType là Exact, Ingress sẽ route traffic vào service nếu path của request bằng path của rule. Ví dụ: /service1 sẽ được route vào service1 nhưng /service1/api sẽ không được route vào service1.\nImplementationSpecific: Nếu pathType là ImplementationSpecific, Ingress Controller sẽ xác định cách route traffic vào service.\n2. Ingress Controller Ingress Controller là một daemon, nó sẽ thực hiện các quyết định định tuyến dựa trên thông tin trong Ingress Rule.\nNói một cách dễ hiểu, Ingress Controller giống như một người điều phối và Ingress Rule là một bản hướng dẫn cho người điều phối đó để hướng dẫn traffic vào các service trong cluster.\nCác loại Ingress Controller phổ biến: Nginx Ingress Controller, Traefik, HAProxy, \u0026hellip;\nTrong bài viết này, chúng ta sẽ sử dụng Nginx Ingress Controller.\n3. Ví dụ về Ingress: apiVersion: networking.k8s.io/v1\rkind: Ingress\rmetadata:\rname: example-ingress\rnamespace: default\rannotations:\rnginx.ingress.kubernetes.io/rewrite-target: /\rspec:\rrules:\r- host: example.com\rhttp:\rpaths:\r- path: /service1\rpathType: Prefix\rbackend:\rservice:\rname: service1\rport:\rnumber: 80\r- path: /service2\rpathType: Prefix\rbackend:\rservice:\rname: service2\rport:\rnumber: 80\rapiVersion: apps/v1: Khai báo phiên bản API của Kubernetes mà chúng ta sử dụng cho Ingress. kind: Ingress: Loại resource mà chúng ta đang khai báo, ở đây là Ingress. metadata: Thông tin về Ingress. name: Tên của Ingress. namespace: Namespace mà Ingress thuộc về. annotations: Các thông tin bổ sung cho Ingress. nginx.ingress.kubernetes.io/rewrite-target: Thông tin bổ sung cho Ingress Controller. spec: Thông tin cấu hình cho Ingress. rules: Các rule của Ingress. host: Domain name mà Ingress sẽ route traffic vào. http: Cấu hình cho giao thức HTTP. paths: Các đường dẫn mà Ingress sẽ route traffic vào. path: Đường dẫn mà Ingress sẽ route traffic vào. pathType: Loại đường dẫn. backend: Cấu hình backend cho đường dẫn. service: Tên service mà Ingress sẽ route traffic vào. port: Port của service mà Ingress sẽ route traffic vào. number: Port của service mà Ingress sẽ route traffic vào. 3. Ví dụ về Ingress: apiVersion: networking.k8s.io/v1\rkind: Ingress\rmetadata:\rname: example-ingress\rnamespace: default\rannotations:\rnginx.ingress.kubernetes.io/rewrite-target: /\rspec:\rrules:\r- host: example.com\rhttp:\rpaths:\r- path: /service1\rpathType: Prefix\rbackend:\rservice:\rname: service1\rport:\rnumber: 80\r- path: /service2\rpathType: Prefix\rbackend:\rservice:\rname: service2\rport:\rnumber: 80\rapiVersion: apps/v1: Khai báo phiên bản API của Kubernetes mà chúng ta sử dụng cho Ingress. kind: Ingress: Loại resource mà chúng ta đang khai báo, ở đây là Ingress. metadata: Thông tin về Ingress. name: Tên của Ingress. namespace: Namespace mà Ingress thuộc về. annotations: Các thông tin bổ sung cho Ingress. nginx.ingress.kubernetes.io/rewrite-target: Thông tin bổ sung cho Ingress Controller. spec: Thông tin cấu hình cho Ingress. rules: Các rule của Ingress. host: Domain name mà Ingress sẽ route traffic vào. http: Cấu hình cho giao thức HTTP. paths: Các đường dẫn mà Ingress sẽ route traffic vào. path: Đường dẫn mà Ingress sẽ route traffic vào. pathType: Loại đường dẫn. backend: Cấu hình backend cho đường dẫn. service: Tên service mà Ingress sẽ route traffic vào. port: Port của service mà Ingress sẽ route traffic vào. number: Port của service mà Ingress sẽ route traffic vào. Với file cấu hình trên, Ingress sẽ route traffic từ domain example.com vào 2 service service1 và service2 thông qua đường dẫn /service1 và /service2.\n"
},
{
	"uri": "//localhost:1313/vi/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Public một service và route traffic bằng Subdomain và Path 1. Overview Xin chào các bạn trong bài workshop này mình sẽ cùng đồng hành cùng các bạn tìm hiểu 1 khái niệm khá quan trọng trong Kubernetes, đó chính là ingress, và tiến hành public một service và route traffic bằng subdomain và path.\nĐối với K8s thì sẽ có nhiều loại, phiên bản khác nhau, nhưng trong môi trường học tập, làm lab chúng ta có thể dùng các phiên bản nhỏ gọn và nhẹ hơn cả K8s như Minikube, K3s, MicoK8s, \u0026hellip; trong chuỗi series này mình sẽ sử dụng MicroK8s.\n2. Objectives Mục tiêu chuỗi workshop này sẽ giúp các bạn có những khái niệm cơ bản nhất về các khái niệm trong K8s.\nĐây cũng sẽ là tiền đề cho nhiều chuỗi workshop sau này về K8s.\n3. Content Giới thiệu về Ingress. Cài đặt MicroK8s. Cài đặt Ingress Controller. Public một service và route traffic bằng subdomain. Public một service và route traffic bằng path. "
},
{
	"uri": "//localhost:1313/vi/1-introduce_ingress/",
	"title": "Giới thiệu về Ingress",
	"tags": [],
	"description": "",
	"content": "\n1. Vì sao cần Ingress? Trước đó trong workshop mình đã giới thiệu về Service, Deployment, Pod, Namespace, \u0026hellip; và trong bài này mình sẽ giới thiệu cho các bạn về Ingress.\nTrong ws trước chúng ta đã có thể expose service ra bên ngoài cluster thông qua NodePort cách này vẫn hoạt động tốt nhưng không phải lúc nào cũng phù hợp, tổng số port trên một node là có hạn và không thể mở rộng, nếu có nhiều service cần expose ra bên ngoài thì việc quản lý port sẽ trở nên khó khăn.\nHơn nữa NodePort chỉ cho phép expose service ra bên ngoài cluster thông qua port, không thể expose service ra bên ngoài cluster thông qua domain name.\nVì vậy Ingress ra đời để giải quyết vấn đề trên, Ingress là một resource trong Kubernetes cho phép route traffic từ bên ngoài vào các service trong cluster.\n2. Khái niệm về Ingress trong Kubernetes. Ingress là một resource trong Kubernetes cho phép route traffic từ bên ngoài vào các service trong cluster.\nNhư hình minh họa ở trên khi chúng ta dùng ingress thì chỉ có 1 cổng đi vào cluster, từ đó có thể route traffic vào các service trong cluster.\nĐể dễ hiểu hơn, hãy tưởng tượng bạn có nhiều dịch vụ chạy bên trong cụm k8s của mình, mỗi dịch vụ giống như một cửa hàng trong một trung tâm thương mại. Ingress giống như một quầy lễ tân ở lối vào trung tâm thương mại, nơi sẽ hướng dẫn khách hàng (yêu cầu từ bên ngoài) đến đúng cửa hàng (dịch vụ) mà họ cần.\n3. Các thành phần của Ingress Ingress bao gồm 2 thành phần chính:\nIngress Rule: Là một resource trong Kubernetes, nó định nghĩa cách route traffic từ bên ngoài vào các service trong cluster.\nIngress Controller: Là một daemon, nó sẽ thực hiện các quyết định định tuyến dựa trên thông tin trong Ingress Resource.\nChúng ta sẽ tìm hiểu chi tiết hơn về Ingress Rule và Ingress Controller trong các phần tiếp theo.\n"
},
{
	"uri": "//localhost:1313/vi/2-install_microk8s/2.1-ubuntu/",
	"title": "Ubuntu",
	"tags": [],
	"description": "",
	"content": "1. Install MicroK8s on Linux sudo snap install microk8s --classic\rsudo snap alias microk8s.kubectl kubectl\r2. Check the status while Kubernetes starts microk8s status --wait-ready\r3. Turn on the services you want microk8s enable dashboard\rmicrok8s enable dns\rmicrok8s enable registry\r4. Start using Kubernetes microk8s kubectl get all --all-namespaces\r"
},
{
	"uri": "//localhost:1313/vi/2-install_microk8s/",
	"title": "Install microk8s",
	"tags": [],
	"description": "",
	"content": "\n1. Thông tin tham khảo về quá trình cài đặt MicroK8s 2. Thông tin tham khảo về quá trình cài đặt MiniKube "
},
{
	"uri": "//localhost:1313/vi/2-install_microk8s/2.2-windows/",
	"title": "Windows",
	"tags": [],
	"description": "",
	"content": "1. Download the installer for Windows 2. Run the Installer 3. Open a command line 4. Check the status while Kubernetes starts microk8s status --wait-ready\r5. Turn on the services you want microk8s enable dashboard\rmicrok8s enable dns\rmicrok8s enable registry\r6. Start using Kubernetes microk8s kubectl get all --all-namespaces\r"
},
{
	"uri": "//localhost:1313/vi/2-install_microk8s/2.3-macos/",
	"title": "macOS",
	"tags": [],
	"description": "",
	"content": "1. Install MicroK8s on macOS brew install ubuntu/microk8s/microk8s\rmicrok8s install\r2. Check the status while Kubernetes starts microk8s status --wait-ready\r3. Turn on the services you want microk8s enable dashboard\rmicrok8s enable dns\rmicrok8s enable registry\r4. Start using Kubernetes microk8s kubectl get all --all-namespaces\r"
},
{
	"uri": "//localhost:1313/vi/3-install_ingress_controller/",
	"title": "Tiến hành cài đặt Ingress Controller",
	"tags": [],
	"description": "",
	"content": "Trong bài viết này, tôi sử dụng MicroK8s để cài đặt Ingress Controller, và sử dụng Nginx Ingress Controller làm ví dụ.\n1. Cài đặt Ingress Controller bằng Add-on Phần ingress này nằm trong phần Add-on của MicroK8s, nên việc cài đặt khá đơn giản.\nmicrok8s enable ingress\rSau khi cài đặt xong, chúng ta sẽ thấy một Pod mới được tạo ra:\nTuy nhiên sau đây tôi sẽ hướng dẫn các bạn cách cài đặt Ingress Controller bằng cách sử dụng Helm. Phòng trường hợp bạn không sử dụng MicroK8s hoặc muốn tùy chỉnh nhiều hơn.\n2. Cài đặt Ingress Controller bằng Helm Đầu tiên tôi sẽ disable Add-on Ingress trước:\nmicrok8s disable ingress\rTiếp theo, chúng ta sẽ cài đặt Helm:\nsudo snap install helm --classic\rSau khi cài đặt xong, chúng ta sẽ add Helm repository của Nginx Ingress Controller:\nhelm repo add nginx-stable https://helm.nginx.com/stable\rhelm repo update\rTiếp theo, chúng ta sẽ cài đặt Nginx Ingress Controller:\nhelm install nginx-ingress ingress-nginx/ingress-nginx "
},
{
	"uri": "//localhost:1313/vi/4-public_service_with_ingress-1/",
	"title": "Sử dụng Ingress để Route Traffic bằng Subdomain",
	"tags": [],
	"description": "",
	"content": "Trong bài viết này, tôi sẽ hướng dẫn các bạn cách sử dụng Ingress để route traffic bằng Subdomain.\n1. Giới thiệu Chúng ta sẽ tiến hành tạo 2 service, mỗi service sẽ được route traffic bằng 1 subdomain khác nhau.\nservice1.example.com -\u0026gt; service1\nservice2.example.com -\u0026gt; service1\n2. Tạo 2 deployment và service Ở đây tôi tạo 2 deployment và service đơn giản và sử dụng image nginx:\nTiến hành deploy 2 file này:\nkubectl apply -f service1.yaml\rkubectl apply -f service2.yaml\rKiểm tra xem mọi thứ đã ổn chưa:\nkubectl get pods\r3. Tiến hành cấu hình Ingress để route traffic apiVersion: networking.k9s.io/v1: Khai báo phiên bản API của Kubernetes mà chúng ta sử dụng cho Ingress. kind: Ingress: Loại resource mà chúng ta đang khai báo, ở đây là Ingress. metadata: Thông tin về Ingress name: Tên của Ingress annotations: Các thông tin bổ sung cho Ingress nginx.ingress.kubernetes.io/rewrite-target: Thông tin bổ sung cho NGINX Ingress Controller, dùng để rewrite đường dẫn của request thành / trước khi gửi đến backend. spec: Thông tin cấu hình cho Ingress rules: Các quy tắc (rules) mà Ingress sẽ sử dụng để route traffic vào các dịch vụ (service) backend host: Subdomain mà chúng ta muốn route trafficDomain name mà Ingress sẽ route traffic vào. Ở đây, có hai domain: service1.example.com và service3.example.com. http: Cấu hình cho HTTP paths: Các path mà chúng ta muốn route traffic path: Đường dẫn mà chúng ta muốn route trafficĐường dẫn mà Ingress sẽ route traffic vào. Trong ví dụ này, đường dẫn là / trên cả hai domain. pathType: Loại path, ở đây là PrefixpathType: Loại đường dẫn. Ở đây, Prefix nghĩa là bất kỳ yêu cầu nào bắt đầu với đường dẫn này sẽ được route đến backend. backend: Cấu hình backend cho đường dẫn. service: Tên service mà Ingress sẽ route traffic vào. port: Port của service mà Ingress sẽ route traffic vào. number: Số port của service mà Ingress sẽ route traffic vào. Ở đây, cả hai service đều lắng nghe trên port 80. Tiến hành deploy file cấu hình Ingress:\nkubectl apply -f ingress.yaml\rKiểm tra xem Ingress đã được tạo chưa:\nkubectl get ingress\rNhư vậy, chúng ta đã tạo Ingress để route traffic bằng Subdomain.\n4. Kiểm tra kết quả Đầu tiên các bạn thấy thông tin IP của máy host:\nifconfig\rỞ đây thông tin IP của máy host mình là: 192.168.1.4\nĐể kiểm tra kết quả, chúng ta cần thêm 2 dòng vào file hosts, hiện tại mình đang sử dụng hệ điều hành Ubuntu nên file hosts nằm ở đường dẫn /etc/hosts:\nsudo nano /etc/hosts\rThêm 2 dòng sau vào file hosts:\n192.168.1.4 service1.example.com\r192.168.1.4 service2.example.com\rTiếp theo, mở trình duyệt và truy cập vào 2 domain service1.example.com và service2.example.com:\nNhư vậy, chúng ta đã sử dụng Ingress để route traffic bằng Subdomain.\n"
},
{
	"uri": "//localhost:1313/vi/5-public_service_with_ingress-2/",
	"title": "Sử dụng Ingress để Route Traffic bằng Subdomain",
	"tags": [],
	"description": "",
	"content": "Như phần trước mình đã hướng dẫn các bạn public một service và route traffic của nó bằng subdomain. Trong phần này mình sẽ hướng dẫn các bạn cách sử dụng Ingress để route traffic bằng path.\n1. Giới thiệu Có thể hiểu đơn giản là chúng ta sẽ route traffic vào service dựa trên đường dẫn của request.\nexample.com/service1 -\u0026gt; service1\nexample.com/service2 -\u0026gt; service2\n2. Tạo 2 deployment và service Ở đây mình tạo 2 deployment và service đơn giản và sử dụng image nginx, ở đây mình dùng luôn 2 service ở phần trước:\nTiến hành deploy 2 file này:\nkubectl apply -f service1.yaml\rkubectl apply -f service2.yaml\rKiểm tra xem mọi thứ đã ổn chưa:\nkubectl get pods\r3. Tiến hành cấu hình Ingress để route traffic apiVersion: networking.k9s.io/v1: Khai báo phiên bản API của Kubernetes mà chúng ta sử dụng cho Ingress. kind: Ingress: Loại resource mà chúng ta đang khai báo, ở đây là Ingress. metadata: Thông tin về Ingress name: Tên của Ingress annotations: Các thông tin bổ sung cho Ingress nginx.ingress.kubernetes.io/rewrite-target: Thông tin bổ sung cho NGINX Ingress Controller, dùng để rewrite đường dẫn của request thành / trước khi gửi đến backend. spec: Thông tin cấu hình cho Ingress rules: Các quy tắc (rules) mà Ingress sẽ sử dụng để route traffic vào các dịch vụ (service) backend host: Subdomain mà chúng ta muốn route trafficDomain name mà Ingress sẽ route traffic vào. Ở đây, có hai domain: service1.example.com và service3.example.com. http: Cấu hình cho HTTP paths: Các path mà chúng ta muốn route traffic path: Đường dẫn mà chúng ta muốn route traffic Đường dẫn mà Ingress sẽ route traffic vào. Trong ví dụ này, đường dẫn là /service1 route traffic vào service1 và /service2 route traffic vào service2. pathType: Loại path, ở đây là PrefixpathType: Loại đường dẫn. Ở đây, Prefix nghĩa là bất kỳ yêu cầu nào bắt đầu với đường dẫn này sẽ được route đến backend. backend: Cấu hình backend cho đường dẫn. service: Tên service mà Ingress sẽ route traffic vào. port: Port của service mà Ingress sẽ route traffic vào. number: Số port của service mà Ingress sẽ route traffic vào. Ở đây, cả hai service đều lắng nghe trên port 80. Tiến hành deploy file cấu hình Ingress:\nkubectl apply -f ingress.yaml\rKiểm tra xem Ingress đã được tạo chưa:\nkubectl get ingress\rNhư vậy, chúng ta đã tạo Ingress để route traffic bằng path.\n4. Kiểm tra kết quả Đầu tiên các bạn thấy thông tin IP của máy host:\nifconfig\rỞ đây thông tin IP của máy host mình là: 192.168.1.4\nĐể kiểm tra kết quả, chúng ta cần thêm 2 dòng vào file hosts, hiện tại mình đang sử dụng hệ điều hành Ubuntu nên file hosts nằm ở đường dẫn /etc/hosts:\nsudo nano /etc/hosts\rThêm 2 dòng sau vào file hosts:\n192.168.1.4 example.com\rTiếp theo, mở trình duyệt và truy cập vào 2 domain example.com/service1 và example.com/service2:\nNhư vậy, chúng ta đã sử dụng Ingress để route traffic bằng path.\n"
},
{
	"uri": "//localhost:1313/vi/6-canary_deployments/",
	"title": "Cấu hình Canary deployments",
	"tags": [],
	"description": "",
	"content": "Trong bài viết này, tôi sẽ hướng dẫn các bạn cách triển khai Canary Deployments Ingress.\n1. Canary Deployments là gì? Canary Deployments là một phương pháp triển khai phần mềm mới một cách an toàn và kiểm soát. Phương pháp này cho phép bạn triển khai một phiên bản mới của ứng dụng và chỉ chuyển một phần nhỏ lưu lượng truy cập tới phiên bản mới. Điều này giúp bạn kiểm tra phiên bản mới trước khi triển khai cho tất cả người dùng.\n2. Cấu hình Canary Deployments cho ingress Ok chúng ta sẽ tái sử dụng lại 2 service ở phần trước.\nMình sẽ lấy ví dụ service 1 là phiên bản cũ và service 2 là phiên bản mới.\nChúng ta có file cấu hình Ingress như sau:\nỞ đây mình sẽ route 80% traffic vào service 1 và 20% traffic vào service 2\nTiến hành deploy file cấu hình Ingress:\nkubectl apply -f ingress.yaml\r4. Kiểm tra kết quả Đầu tiên các bạn thấy thông tin IP của máy host:\nifconfig\rỞ đây thông tin IP của máy host mình là: 192.168.1.4\nĐể kiểm tra kết quả, chúng ta cần thêm 2 dòng vào file hosts, hiện tại mình đang sử dụng hệ điều hành Ubuntu nên file hosts nằm ở đường dẫn /etc/hosts:\nsudo nano /etc/hosts\rThêm 2 dòng sau vào file hosts:\n192.168.1.4 canary.example.com\rTiếp theo, mở trình duyệt và truy cập vào domain canary.example.com\nNhư vậy, chúng ta đã cấu hình Canary Deployments Ingress thành công với traffic 80% vào service 1 và 20% vào service 2.\n"
},
{
	"uri": "//localhost:1313/vi/7-whitelist_deployments/",
	"title": "Cấu hình Ingress với IP Whitelist",
	"tags": [],
	"description": "",
	"content": "Trong bài viết này, tôi sẽ hướng dẫn các bạn cách cấu hình Ingress với IP Whitelist.\n1. IP Whitelist là gì? IP Whitelist là một danh sách các địa chỉ IP được phép truy cập vào một dịch vụ hoặc một ứng dụng. Các IP không nằm trong danh sách này sẽ không thể truy cập vào dịch vụ hoặc ứng dụng đó.\nỨng dụng của chứng năng này là để bảo vệ dịch vụ hoặc ứng dụng khỏi các cuộc tấn công từ các IP không mong muốn. Hoặc giới hạn quyền truy cập vào dịch vụ hoặc ứng dụng với một số IP cụ thể như các IP nội bộ của công ty, \u0026hellip;\n2. Cấu hình Ingress với IP Whitelist Ok chúng ta sẽ tái sử dụng lại 2 service ở phần trước.\nMình sẽ lấy ví dụ service 1 là phiên bản cũ và service 2 là phiên bản mới.\nChúng ta sẽ cấu hình chỉ có IP 192,168.1.10 được truy cập vào service 2 thôi.\nTrong file cấu hình trên chúng ta route \u0026ldquo;service2.example.com\u0026rdquo; vào service 2, tuy nhiên chỉ có IP 192.168.1.10 được truy cập vào service 2.\nTiến hành deploy file cấu hình Ingress:\nkubectl apply -f ingress.yaml\r4. Kiểm tra kết quả Đầu tiên các bạn thấy thông tin IP của máy host:\nifconfig\rỞ đây thông tin IP của máy host mình là: 192.168.1.4\nĐể kiểm tra kết quả, chúng ta cần thêm 2 dòng vào file hosts, hiện tại mình đang sử dụng hệ điều hành Ubuntu nên file hosts nằm ở đường dẫn /etc/hosts:\nsudo nano /etc/hosts\rThêm 2 dòng sau vào file hosts:\n192.168.1.4 service2.example.com\rTiếp theo, mở trình duyệt và truy cập vào domain service2.example.com bằng chính máy host, và gặp thông báo lỗi 403 Forbidden:\nTiếp theo chúng ta sẽ thử truy cập vào domain service2.example.com bằng máy có IP 192.168.1.10:\nHiện tại đây là máy với IP đúng với IP được whitelist:\nỞ đây tôi cũng phải cấu hình thông tin /etc/hosts như trên máy có IP 192.168.1.10:\nSau có chúng ta tiến hành curl vào domain service2.example.com:\ncurl service2.example.com\rKết quả trả về:\nNhư vậy, chúng ta đã cấu hình Ingress với IP Whitelist thành công. Chỉ có IP 192.168.1.10 được truy cập vào service 2.\n"
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]